using ICities;using System;using System.Collections.Generic;namespace WufireNameGenerator{  public class LoadingExtension : LoadingExtensionBase  {    private void AdjustBuidingAI (BuildingInfo buildinginfo, Dictionary<Type, Type> componentRemap)    {      BuildingAI component = buildinginfo.GetComponent<BuildingAI> ();      Type type = component.GetType ();      Type type2;      if (componentRemap.TryGetValue (type, out type2))      {        BuildingAI buildingAI = buildinginfo.gameObject.AddComponent (type2) as BuildingAI;        buildingAI.m_info = buildinginfo;        buildinginfo.m_buildingAI = buildingAI;        //        DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Successfully patched building info with " + type2);      }    }        public override void OnLevelLoaded (LoadMode mode)    {      if (mode == LoadMode.LoadGame || mode == LoadMode.LoadMap)      {        //        "COMMERCIAL_HIGH_NAME"        //        "COMMERCIAL_LOW_NAME        //        "OFFICE_NAME"                //        if (this.m_info.m_class.m_subService == ItemClass.SubService.IndustrialGeneric)        //        {        //          key = this.m_info.m_class.m_level.ToString ();        //          num = Locale.Count ("INDUSTRIAL_NAME", key);        //          return Locale.Get ("INDUSTRIAL_NAME", key, randomizer.Int32 (num));        //        }        //        key = this.m_info.m_class.m_subService.ToString ();        //        num = Locale.Count ("INDUSTRIAL_NAME", key);        //        return Locale.Get ("INDUSTRIAL_NAME", key, randomizer.Int32 (num));                //        if (this.m_info.m_class.m_subService == ItemClass.SubService.CommercialLow)        //        {        //          key = this.m_info.m_class.m_level.ToString ();        //          num = Locale.Count ("RESIDENCE_LOW_PATTERN", key);        //          string format = Locale.Get ("RESIDENCE_LOW_PATTERN", key, randomizer.Int32 (num));        //          num = Locale.Count ("RESIDENCE_NAME");        //          string arg = Locale.Get ("RESIDENCE_NAME", randomizer.Int32 (num));        //          return string.Format (format, arg);        //        }        //        key = this.m_info.m_class.m_level.ToString ();        //        num = Locale.Count ("RESIDENCE_HIGH_PATTERN", key);        //        string format2 = Locale.Get ("RESIDENCE_HIGH_PATTERN", key, randomizer.Int32 (num));        //        num = Locale.Count ("RESIDENCE_NAME");        //        string arg2 = Locale.Get ("RESIDENCE_NAME", randomizer.Int32 (num));                Dictionary<Type, Type> dictionary = new Dictionary<Type, Type> ();        dictionary.Add (typeof(CommercialBuildingAI), typeof(CommercialBuildingAIMod));        dictionary.Add (typeof(OfficeBuildingAI), typeof(OfficeBuildingAIMod));        dictionary.Add (typeof(IndustrialBuildingAI), typeof(IndustrialBuildingAIMod));        Dictionary<Type, Type> componentRemap = dictionary;        int num = PrefabCollection<BuildingInfo>.PrefabCount ();        DebugOutputPanel.AddMessage (ColossalFramework.Plugins.PluginManager.MessageType.Message, "Found " + num + " building infos.");        uint num2 = 0u;        while ((ulong)num2 < (ulong)((long)num))        {          BuildingInfo prefab = PrefabCollection<BuildingInfo>.GetPrefab (num2);          this.AdjustBuidingAI (prefab, componentRemap);          num2 += 1u;        }        BuildingNameGenerator.Initialize();      }    }  }}