// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Reflection;
using ICities;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using ColossalFramework.IO;
using UnityEngine;
namespace WufireNameGenerator
{
	public class BuildingNameData
	{
		private Dictionary<string, List<NamePart>> buildingNames;
		public BuildingNameData ()
		{
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Set up building name data");
			_readNamesFromFile();
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "buildingNames dictionary size: " + buildingNames.Count);
		}

		private string _stringFromDefaultFile(string resourceName) {
			string fileResource = "";
			if (resourceName == WufireNameGenerator.CommercialNameFile) {
				fileResource = "WufireNameGenerator.DefaultCommercialNames.json";
			} else if (resourceName == WufireNameGenerator.IndustryNameFile) {
				fileResource = "WufireNameGenerator.DefaultIndustryNames.json";
			} else if (resourceName == WufireNameGenerator.OfficeNameFile) {
				fileResource = "WufireNameGenerator.DefaultOfficeNames.json";
			}
			Assembly _assembly;
			StreamReader _textStreamReader;
			string defaultJson = null;
			try
			{
				DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Trying to write file");
				_assembly = Assembly.GetExecutingAssembly();
				_textStreamReader = new StreamReader(_assembly.GetManifestResourceStream(fileResource));//"WufireNameGenerator.DefaultCommercialNames.json"));
				defaultJson = _textStreamReader.ReadToEnd();
			}
			catch
			{
				//					MessageBox.Show("Error accessing resources!");
			}

			return defaultJson;
		}

		private void _readNamesFromFile() {

			List<string> filesToCheck = new List<string>{WufireNameGenerator.CommercialNameFile, WufireNameGenerator.OfficeNameFile, WufireNameGenerator.IndustryNameFile};
			buildingNames = new Dictionary<string, List<NamePart>>();

			foreach (string file in filesToCheck) {
				if ( ! FileUtils.Exists(file)) {
					DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Name file not found. Writing new name file to " + file);
					string defaultText = _stringFromDefaultFile(file);
					System.IO.File.WriteAllText(file, defaultText);
				}
				object obj = null;
				try {
					string fileText = System.IO.File.ReadAllText(file);
					obj = ColossalFramework.HTTP.JSON.JsonDecode(fileText);
				} catch {
					// Error - Load default name file
					DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Error, "Error parsing name file. Loading default names.");
					string fileText = _stringFromDefaultFile(file);
					obj = ColossalFramework.HTTP.JSON.JsonDecode(fileText);
				}
				if (obj != null) {
					Hashtable dictionary = (Hashtable) obj;
					foreach(string subServiceKey in dictionary.Keys) {
						ArrayList subObj = (ArrayList)dictionary[subServiceKey];
						// ie obj[CommercialLow]
						List<NamePart> newPartList = new List<NamePart>();
						foreach(Hashtable d in subObj) {
							NamePart n = new NamePart(d);
							newPartList.Add(n);
						}
						buildingNames.Add(subServiceKey, newPartList);
					}
				}
			}
		}

		public List<NamePart> BuildingNameDataForSubService(string requestSubService) {
			if (buildingNames.ContainsKey(requestSubService)) {
				return buildingNames[requestSubService];
			}
			return null;
		}
	}
	public class NamePart {
		public bool isOptional;
		public List<string> nameList;

		public NamePart(Hashtable ht) {
			if (ht.ContainsKey("optional")) {
				isOptional = (bool) ht["optional"];
			} else {
				isOptional = false;
			}
			if (ht.ContainsKey("nameList")) {
				ArrayList arrayList = (ArrayList)ht["nameList"];
				nameList = new List<string>(arrayList.Count);
				foreach (string instance in arrayList)
				{
					nameList.Add(instance);
				}
			}
		}

		public NamePart(Dictionary<string, object> obj) {
			if (obj.ContainsKey("optional")) {
				isOptional = (bool) obj["optional"];
			} else {
				isOptional = false;
			}
			
			if(obj.ContainsKey("nameList")) {
				nameList = obj["nameList"] as List<string>;
			}
		}
	}
}

