// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Reflection;
using ICities;
using System.IO;
using System.Collections.Generic;
using ColossalFramework.IO;
using UnityEngine;
namespace WufireNameGenerator
{
	public class BuildingNameData
	{
		private Dictionary<ItemClass.SubService, List<List<string>>> buildingNames;
		public BuildingNameData ()
		{
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Set up building name data");
			_readNamesFromFile();
		}

		private void _readNamesFromFile() {

			if ( ! FileUtils.Exists(WufireNameGenerator.BusinessNameFile)) {
				DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Name file not found");
				Assembly _assembly;
				StreamReader _textStreamReader;
				try
				{
					DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Trying to write file");
					_assembly = Assembly.GetExecutingAssembly();
					_textStreamReader = new StreamReader(_assembly.GetManifestResourceStream("WufireNameGenerator.DefaultBusinessNames.json"));
					System.IO.File.WriteAllText(WufireNameGenerator.BusinessNameFile, _textStreamReader.ReadToEnd());
				}
				catch
				{
//					MessageBox.Show("Error accessing resources!");
				}
			}

			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Reading from file");
			Dictionary<string, List<Dictionary<string,object>>> obj 
				= ColossalFramework.HTTP.JSON.JsonDecode(System.IO.File.ReadAllText(WufireNameGenerator.BusinessNameFile)) 
					as Dictionary<string, List<Dictionary<string,object>>>;
			foreach(string subServiceKey in obj.Keys) {
				List<Dictionary<string,object>> subObj = obj[subServiceKey] as List<Dictionary<string,object>>;
				// ie obj[CommercialLow]

				foreach(Dictionary<string,object> d in subObj) {
					NamePart n = new NamePart(d);
				}
			}
		}

		public List<List<string>> BuildingNameDataForSubService(ItemClass.SubService requestSubService) {
			if (buildingNames.ContainsKey(requestSubService)) {
				return buildingNames[requestSubService];
			}
			return null;
		}

		private class NamePart {
			bool isOptional;
			List<string> nameList;
			public NamePart(Dictionary<string, object> obj) {
				if (obj.ContainsKey("optional")) {
					isOptional = (bool) obj["optional"];
				} else {
					isOptional = false;
				}

				if(obj.ContainsKey("nameList")) {
					nameList = obj["nameList"] as List<string>;
				}
			}
		}

//			{
//				"CommercialLow": [{
//					"optional": false,
//					"nameList": [
//					    "Restaurant"
//					    ]
//				    }],
//				"CommercialHigh": [{
//					"optional": false,
//					"nameList": [
//					    "Cafe"
//					    ]
//				    }]
//			}
	}
}

