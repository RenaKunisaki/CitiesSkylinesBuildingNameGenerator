// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Reflection;
using ICities;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using ColossalFramework.IO;
using UnityEngine;
namespace WufireNameGenerator
{
	public class BuildingNameData
	{
		private Dictionary<string, List<NamePart>> buildingNames;
		public BuildingNameData ()
		{
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Set up building name data");
			_readNamesFromFile();
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "buildingNames dictionary size: " + buildingNames.Count);
		}

		private void _readNamesFromFile() {

			if ( ! FileUtils.Exists(WufireNameGenerator.BusinessNameFile)) {
				DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Name file not found");
				Assembly _assembly;
				StreamReader _textStreamReader;
				try
				{
					DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Trying to write file");
					_assembly = Assembly.GetExecutingAssembly();
					_textStreamReader = new StreamReader(_assembly.GetManifestResourceStream("WufireNameGenerator.DefaultBusinessNames.json"));
					System.IO.File.WriteAllText(WufireNameGenerator.BusinessNameFile, _textStreamReader.ReadToEnd());
				}
				catch
				{
//					MessageBox.Show("Error accessing resources!");
				}
			}

			buildingNames = new Dictionary<string, List<NamePart>>();
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Reading from file");

			string fileText = System.IO.File.ReadAllText(WufireNameGenerator.BusinessNameFile);
			object obj = ColossalFramework.HTTP.JSON.JsonDecode(fileText);

			if (obj != null) {
				DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "obj not null");
			}
			Hashtable dictionary = (Hashtable) obj;

			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "dictionary size? " + dictionary.Count);

			foreach(string subServiceKey in dictionary.Keys) {
				DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Got subServiceKey: " + subServiceKey);
				ArrayList subObj = (ArrayList)dictionary[subServiceKey];
				// ie obj[CommercialLow]
				List<NamePart> newPartList = new List<NamePart>();
				foreach(Hashtable d in subObj) {
					DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "Got NamePart");
					NamePart n = new NamePart(d);
					newPartList.Add(n);
				}
				buildingNames.Add(subServiceKey, newPartList);
			}
		}

		public List<NamePart> BuildingNameDataForSubService(ItemClass.SubService requestSubService) {
			if (buildingNames.ContainsKey(requestSubService.ToString())) {
				return buildingNames[requestSubService.ToString()];
			}
			return null;
		}
	}
	public class NamePart {
		public bool isOptional;
		public List<string> nameList;

		public NamePart(Hashtable ht) {
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "New NamePart");
			if (ht.ContainsKey("optional")) {
				isOptional = (bool) ht["optional"];
			} else {
				isOptional = false;
			}
			if (ht.ContainsKey("nameList")) {
				ArrayList arrayList = (ArrayList)ht["nameList"];
				nameList = new List<string>(arrayList.Count);
				foreach (string instance in arrayList)
				{
					nameList.Add(instance);
				}
			}
		}

		public NamePart(Dictionary<string, object> obj) {
			DebugOutputPanel.AddMessage(ColossalFramework.Plugins.PluginManager.MessageType.Message, "New NamePart");
			if (obj.ContainsKey("optional")) {
				isOptional = (bool) obj["optional"];
			} else {
				isOptional = false;
			}
			
			if(obj.ContainsKey("nameList")) {
				nameList = obj["nameList"] as List<string>;
			}
		}
	}
	//			{
	//				"CommercialLow": [{
	//					"optional": false,
	//					"nameList": [
	//					    "Restaurant"
	//					    ]
	//				    }],
	//				"CommercialHigh": [{
	//					"optional": false,
	//					"nameList": [
	//					    "Cafe"
	//					    ]
	//				    }]
	//			}
}

